//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "DocumentationModelRoot.Generated.h"


#include "DocumentationModelRoot/DocumentationModelRoot.Generated.h"
#include "DocumentationModelRoot/DocumentationModelRoot.Generated.h"

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion

DocumentationModelRoot::DocumentationModelRootSerializersOwner const DocumentationModelRoot::serializersOwner;

void DocumentationModelRoot::DocumentationModelRootSerializersOwner::registerSerializersCore(rd::Serializers const& serializers) const
{
}

void DocumentationModelRoot::connect(rd::Lifetime lifetime, rd::IProtocol const * protocol)
{
    DocumentationModelRoot::serializersOwner.registry(protocol->get_serializers());
    
    identify(*(protocol->get_identity()), rd::RdId::Null().mix("DocumentationModelRoot"));
    bind(lifetime, protocol, "DocumentationModelRoot");
}

// constants
// initializer
void DocumentationModelRoot::initialize()
{
    serializationHash = -7782552752810534509L;
}
// primary ctor
// secondary constructor
// default ctors and dtors
DocumentationModelRoot::DocumentationModelRoot()
{
    initialize();
}
// reader
// writer
// virtual init
void DocumentationModelRoot::init(rd::Lifetime lifetime) const
{
    rd::RdExtBase::init(lifetime);
}
// identify
void DocumentationModelRoot::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
}
// getters
// intern
// equals trait
// equality operators
bool operator==(const DocumentationModelRoot &lhs, const DocumentationModelRoot &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const DocumentationModelRoot &lhs, const DocumentationModelRoot &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
// static type name trait
// polymorphic to string
std::string DocumentationModelRoot::toString() const
{
    std::string res = "DocumentationModelRoot\n";
    return res;
}
// external to string
std::string to_string(const DocumentationModelRoot & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

