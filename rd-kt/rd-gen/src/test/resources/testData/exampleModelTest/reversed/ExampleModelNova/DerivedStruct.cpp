//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "DerivedStruct.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void DerivedStruct::initialize()
{
}
// primary ctor
DerivedStruct::DerivedStruct(bool derivedField_, int32_t baseField_) :
BaseStruct(std::move(baseField_))
,derivedField_(std::move(derivedField_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
DerivedStruct DerivedStruct::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    auto baseField_ = buffer.read_integral<int32_t>();
    auto derivedField_ = buffer.read_bool();
    DerivedStruct res{std::move(derivedField_), std::move(baseField_)};
    return res;
}
// writer
void DerivedStruct::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    buffer.write_integral(baseField_);
    buffer.write_bool(derivedField_);
}
// virtual init
// identify
// getters
bool const & DerivedStruct::get_derivedField() const
{
    return derivedField_;
}
// intern
// equals trait
bool DerivedStruct::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<DerivedStruct const&>(object);
    if (this == &other) return true;
    if (this->derivedField_ != other.derivedField_) return false;
    if (this->baseField_ != other.baseField_) return false;
    
    return true;
}
// equality operators
bool operator==(const DerivedStruct &lhs, const DerivedStruct &rhs) {
    if (lhs.type_name() != rhs.type_name()) return false;
    return lhs.equals(rhs);
}
bool operator!=(const DerivedStruct &lhs, const DerivedStruct &rhs){
    return !(lhs == rhs);
}
// hash code trait
size_t DerivedStruct::hashCode() const noexcept
{
    size_t __r = 0;
    __r = __r * 31 + (rd::hash<bool>()(get_derivedField()));
    __r = __r * 31 + (rd::hash<int32_t>()(get_baseField()));
    return __r;
}
// type name trait
std::string DerivedStruct::type_name() const
{
    return "DerivedStruct";
}
// static type name trait
std::string DerivedStruct::static_type_name()
{
    return "DerivedStruct";
}
// polymorphic to string
std::string DerivedStruct::toString() const
{
    std::string res = "DerivedStruct\n";
    res += "\tderivedField = ";
    res += rd::to_string(derivedField_);
    res += '\n';
    res += "\tbaseField = ";
    res += rd::to_string(baseField_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const DerivedStruct & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

