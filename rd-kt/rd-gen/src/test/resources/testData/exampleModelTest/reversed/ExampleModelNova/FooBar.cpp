//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "FooBar.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void FooBar::initialize()
{
}
// primary ctor
FooBar::FooBar(rd::Wrapper<Baz> a_) :
rd::IPolymorphicSerializable(), rd::RdBindableBase()
,a_(std::move(a_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
FooBar FooBar::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    auto _id = rd::RdId::read(buffer);
    auto a_ = Baz::read(ctx, buffer);
    FooBar res{std::move(a_)};
    withId(res, _id);
    return res;
}
// writer
void FooBar::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    this->rdid.write(buffer);
    rd::Polymorphic<std::decay_t<decltype(a_)>>::write(ctx, buffer, a_);
}
// virtual init
void FooBar::init(rd::Lifetime lifetime) const
{
    rd::RdBindableBase::init(lifetime);
    bindPolymorphic(a_, lifetime, this, "a");
}
// identify
void FooBar::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
    identifyPolymorphic(a_, identities, id.mix(".a"));
}
// getters
Baz const & FooBar::get_a() const
{
    return *a_;
}
// intern
// equals trait
bool FooBar::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<FooBar const&>(object);
    return this == &other;
}
// equality operators
bool operator==(const FooBar &lhs, const FooBar &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const FooBar &lhs, const FooBar &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
std::string FooBar::type_name() const
{
    return "FooBar";
}
// static type name trait
std::string FooBar::static_type_name()
{
    return "FooBar";
}
// polymorphic to string
std::string FooBar::toString() const
{
    std::string res = "FooBar\n";
    res += "\ta = ";
    res += rd::to_string(a_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const FooBar & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

