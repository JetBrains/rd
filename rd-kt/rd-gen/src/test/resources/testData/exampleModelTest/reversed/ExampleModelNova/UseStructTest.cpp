//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "UseStructTest.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void UseStructTest::initialize()
{
}
// primary ctor
UseStructTest::UseStructTest(int32_t testField_, rd::Wrapper<std::wstring> testField2_) :
rd::IPolymorphicSerializable()
,testField_(std::move(testField_)), testField2_(std::move(testField2_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
UseStructTest UseStructTest::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    auto testField_ = buffer.read_integral<int32_t>();
    auto testField2_ = buffer.read_wstring();
    UseStructTest res{std::move(testField_), std::move(testField2_)};
    return res;
}
// writer
void UseStructTest::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    buffer.write_integral(testField_);
    buffer.write_wstring(testField2_);
}
// virtual init
// identify
// getters
int32_t const & UseStructTest::get_testField() const
{
    return testField_;
}
std::wstring const & UseStructTest::get_testField2() const
{
    return *testField2_;
}
// intern
// equals trait
bool UseStructTest::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<UseStructTest const&>(object);
    if (this == &other) return true;
    if (this->testField_ != other.testField_) return false;
    if (this->testField2_ != other.testField2_) return false;
    
    return true;
}
// equality operators
bool operator==(const UseStructTest &lhs, const UseStructTest &rhs) {
    if (lhs.type_name() != rhs.type_name()) return false;
    return lhs.equals(rhs);
}
bool operator!=(const UseStructTest &lhs, const UseStructTest &rhs){
    return !(lhs == rhs);
}
// hash code trait
size_t UseStructTest::hashCode() const noexcept
{
    size_t __r = 0;
    __r = __r * 31 + (rd::hash<int32_t>()(get_testField()));
    __r = __r * 31 + (rd::hash<std::wstring>()(get_testField2()));
    return __r;
}
// type name trait
std::string UseStructTest::type_name() const
{
    return "UseStructTest";
}
// static type name trait
std::string UseStructTest::static_type_name()
{
    return "UseStructTest";
}
// polymorphic to string
std::string UseStructTest::toString() const
{
    std::string res = "UseStructTest\n";
    res += "\ttestField = ";
    res += rd::to_string(testField_);
    res += '\n';
    res += "\ttestField2 = ";
    res += rd::to_string(testField2_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const UseStructTest & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

