//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "ValueStruct.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void ValueStruct::initialize()
{
}
// primary ctor
ValueStruct::ValueStruct(int32_t value_) :
rd::IPolymorphicSerializable()
,value_(std::move(value_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
ValueStruct ValueStruct::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    auto value_ = buffer.read_integral<int32_t>();
    ValueStruct res{std::move(value_)};
    return res;
}
// writer
void ValueStruct::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    buffer.write_integral(value_);
}
// virtual init
// identify
// getters
int32_t const & ValueStruct::get_value() const
{
    return value_;
}
// intern
// equals trait
bool ValueStruct::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<ValueStruct const&>(object);
    if (this == &other) return true;
    if (this->value_ != other.value_) return false;
    
    return true;
}
// equality operators
bool operator==(const ValueStruct &lhs, const ValueStruct &rhs) {
    if (lhs.type_name() != rhs.type_name()) return false;
    return lhs.equals(rhs);
}
bool operator!=(const ValueStruct &lhs, const ValueStruct &rhs){
    return !(lhs == rhs);
}
// hash code trait
size_t ValueStruct::hashCode() const noexcept
{
    size_t __r = 0;
    __r = __r * 31 + (rd::hash<int32_t>()(get_value()));
    return __r;
}
// type name trait
std::string ValueStruct::type_name() const
{
    return "ValueStruct";
}
// static type name trait
std::string ValueStruct::static_type_name()
{
    return "ValueStruct";
}
// polymorphic to string
std::string ValueStruct::toString() const
{
    std::string res = "ValueStruct\n";
    res += "\tvalue = ";
    res += rd::to_string(value_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const ValueStruct & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

