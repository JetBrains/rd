//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "Foo_Unknown.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void Foo_Unknown::initialize()
{
}
// primary ctor
Foo_Unknown::Foo_Unknown(int32_t x_, rd::RdMap<int32_t, int32_t, rd::Polymorphic<int32_t>, rd::Polymorphic<int32_t>> sdf_, rd::RdId unknownId_, rd::Buffer::ByteArray unknownBytes_) :
Foo(std::move(x_),std::move(sdf_)), rd::IUnknownInstance(std::move(unknownId_))

{
    initialize();
}
// secondary constructor
Foo_Unknown::Foo_Unknown(int32_t x_, rd::RdId unknownId_, rd::Buffer::ByteArray unknownBytes_) : 
Foo_Unknown((std::move(x_)),{},(std::move(unknownId_)),(std::move(unknownBytes_)))
{
    initialize();
}
// default ctors and dtors
// reader
Foo_Unknown Foo_Unknown::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    throw std::logic_error("Unknown instances should not be read via serializer");
}
// writer
void Foo_Unknown::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    this->rdid.write(buffer);
    buffer.write_integral(x_);
    sdf_.write(ctx, buffer);
    buffer.write_byte_array_raw(unknownBytes_);
}
// virtual init
void Foo_Unknown::init(rd::Lifetime lifetime) const
{
    rd::RdBindableBase::init(lifetime);
}
// identify
void Foo_Unknown::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
}
// getters
// intern
// equals trait
bool Foo_Unknown::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<Foo_Unknown const&>(object);
    return this == &other;
}
// equality operators
bool operator==(const Foo_Unknown &lhs, const Foo_Unknown &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const Foo_Unknown &lhs, const Foo_Unknown &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
std::string Foo_Unknown::type_name() const
{
    return "Foo_Unknown";
}
// static type name trait
std::string Foo_Unknown::static_type_name()
{
    return "Foo_Unknown";
}
// polymorphic to string
std::string Foo_Unknown::toString() const
{
    std::string res = "Foo_Unknown\n";
    res += "\tx = ";
    res += rd::to_string(x_);
    res += '\n';
    res += "\tsdf = ";
    res += rd::to_string(sdf_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const Foo_Unknown & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

