//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "ExampleRootNova.Generated.h"


#include "ExampleRootNova/ExampleRootNova.Generated.h"
#include "ExampleRootNova/ExampleRootNova.Generated.h"
#include "ExampleModelNova/ExampleModelNova.Generated.h"

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion

ExampleRootNova::ExampleRootNovaSerializersOwner const ExampleRootNova::serializersOwner;

void ExampleRootNova::ExampleRootNovaSerializersOwner::registerSerializersCore(rd::Serializers const& serializers) const
{
    ExampleModelNova::serializersOwner.registry(serializers);
}

void ExampleRootNova::connect(rd::Lifetime lifetime, rd::IProtocol const * protocol)
{
    ExampleRootNova::serializersOwner.registry(protocol->get_serializers());
    
    identify(*(protocol->get_identity()), rd::RdId::Null().mix("ExampleRootNova"));
    bind(lifetime, protocol, "ExampleRootNova");
}

// constants
// initializer
void ExampleRootNova::initialize()
{
    serializationHash = -1365062388667980170L;
}
// primary ctor
// secondary constructor
// default ctors and dtors
ExampleRootNova::ExampleRootNova()
{
    initialize();
}
// reader
// writer
// virtual init
void ExampleRootNova::init(rd::Lifetime lifetime) const
{
    rd::RdExtBase::init(lifetime);
}
// identify
void ExampleRootNova::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
}
// getters
// intern
// equals trait
// equality operators
bool operator==(const ExampleRootNova &lhs, const ExampleRootNova &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const ExampleRootNova &lhs, const ExampleRootNova &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
// static type name trait
// polymorphic to string
std::string ExampleRootNova::toString() const
{
    std::string res = "ExampleRootNova\n";
    return res;
}
// external to string
std::string to_string(const ExampleRootNova & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

