//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "A.Generated.h"


#include "A_Unknown.Generated.h"

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void A::initialize()
{
    y_.optimize_nested = true;
    z_.optimize_nested = true;
}
// primary ctor
A::A(rd::RdProperty<std::wstring, rd::Polymorphic<std::wstring>> y_, rd::RdProperty<Z, rd::Polymorphic<Z>> z_, int32_t x_, rd::RdMap<int32_t, int32_t, rd::Polymorphic<int32_t>, rd::Polymorphic<int32_t>> sdf_) :
Foo(std::move(x_),std::move(sdf_))
,y_(std::move(y_)), z_(std::move(z_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
rd::Wrapper<A> A::readUnknownInstance(rd::SerializationCtx& ctx, rd::Buffer & buffer, rd::RdId const& unknownId, int32_t size)
{
    int32_t objectStartPosition = buffer.get_position();
    auto _id = rd::RdId::read(buffer);
    auto y_ = rd::RdProperty<std::wstring, rd::Polymorphic<std::wstring>>::read(ctx, buffer);
    auto z_ = rd::RdProperty<Z, rd::Polymorphic<Z>>::read(ctx, buffer);
    auto x_ = buffer.read_integral<int32_t>();
    auto sdf_ = rd::RdMap<int32_t, int32_t, rd::Polymorphic<int32_t>, rd::Polymorphic<int32_t>>::read(ctx, buffer);
    auto unknownBytes = rd::Buffer::ByteArray(objectStartPosition + size - buffer.get_position());
    buffer.read_byte_array_raw(unknownBytes);
    A_Unknown res{std::move(y_), std::move(z_), std::move(x_), std::move(sdf_), unknownId, unknownBytes};
    withId(res, _id);
    return rd::Wrapper<A_Unknown>(std::move(res));
}
// writer
// virtual init
void A::init(rd::Lifetime lifetime) const
{
    rd::RdBindableBase::init(lifetime);
    bindPolymorphic(y_, lifetime, this, "y");
    bindPolymorphic(z_, lifetime, this, "z");
}
// identify
void A::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
    identifyPolymorphic(y_, identities, id.mix(".y"));
    identifyPolymorphic(z_, identities, id.mix(".z"));
}
// getters
rd::IProperty<std::wstring> const & A::get_y() const
{
    return y_;
}
rd::IProperty<Z> const & A::get_z() const
{
    return z_;
}
// intern
// equals trait
// equality operators
bool operator==(const A &lhs, const A &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const A &lhs, const A &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
std::string A::type_name() const
{
    return "A";
}
// static type name trait
std::string A::static_type_name()
{
    return "A";
}
// polymorphic to string
std::string A::toString() const
{
    std::string res = "A\n";
    res += "\ty = ";
    res += rd::to_string(y_);
    res += '\n';
    res += "\tz = ";
    res += rd::to_string(z_);
    res += '\n';
    res += "\tx = ";
    res += rd::to_string(x_);
    res += '\n';
    res += "\tsdf = ";
    res += rd::to_string(sdf_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const A & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

