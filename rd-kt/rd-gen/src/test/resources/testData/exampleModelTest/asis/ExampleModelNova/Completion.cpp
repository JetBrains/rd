//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "Completion.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void Completion::initialize()
{
    lookupItems_.optimize_nested = true;
}
// primary ctor
Completion::Completion(rd::RdMap<int32_t, bool, rd::Polymorphic<int32_t>, rd::Polymorphic<bool>> lookupItems_) :
rd::IPolymorphicSerializable(), rd::RdBindableBase()
,lookupItems_(std::move(lookupItems_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
Completion::Completion()
{
    initialize();
}
// reader
Completion Completion::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    auto _id = rd::RdId::read(buffer);
    auto lookupItems_ = rd::RdMap<int32_t, bool, rd::Polymorphic<int32_t>, rd::Polymorphic<bool>>::read(ctx, buffer);
    Completion res{std::move(lookupItems_)};
    withId(res, _id);
    return res;
}
// writer
void Completion::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    this->rdid.write(buffer);
    lookupItems_.write(ctx, buffer);
}
// virtual init
void Completion::init(rd::Lifetime lifetime) const
{
    rd::RdBindableBase::init(lifetime);
    bindPolymorphic(lookupItems_, lifetime, this, "lookupItems");
}
// identify
void Completion::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
    identifyPolymorphic(lookupItems_, identities, id.mix(".lookupItems"));
}
// getters
rd::IViewableMap<int32_t, bool> const & Completion::get_lookupItems() const
{
    return lookupItems_;
}
// intern
// equals trait
bool Completion::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<Completion const&>(object);
    return this == &other;
}
// equality operators
bool operator==(const Completion &lhs, const Completion &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const Completion &lhs, const Completion &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
std::string Completion::type_name() const
{
    return "Completion";
}
// static type name trait
std::string Completion::static_type_name()
{
    return "Completion";
}
// polymorphic to string
std::string Completion::toString() const
{
    std::string res = "Completion\n";
    res += "\tlookupItems = ";
    res += rd::to_string(lookupItems_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const Completion & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

