//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "DerivedClass.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void DerivedClass::initialize()
{
}
// primary ctor
DerivedClass::DerivedClass(bool derivedField_, int32_t baseField_) :
BaseClass(std::move(baseField_))
,derivedField_(std::move(derivedField_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
DerivedClass DerivedClass::read(rd::SerializationCtx& ctx, rd::Buffer & buffer)
{
    auto _id = rd::RdId::read(buffer);
    auto baseField_ = buffer.read_integral<int32_t>();
    auto derivedField_ = buffer.read_bool();
    DerivedClass res{std::move(derivedField_), std::move(baseField_)};
    withId(res, _id);
    return res;
}
// writer
void DerivedClass::write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const
{
    this->rdid.write(buffer);
    buffer.write_integral(baseField_);
    buffer.write_bool(derivedField_);
}
// virtual init
void DerivedClass::init(rd::Lifetime lifetime) const
{
    rd::RdBindableBase::init(lifetime);
}
// identify
void DerivedClass::identify(const rd::Identities &identities, rd::RdId const &id) const
{
    rd::RdBindableBase::identify(identities, id);
}
// getters
bool const & DerivedClass::get_derivedField() const
{
    return derivedField_;
}
// intern
// equals trait
bool DerivedClass::equals(rd::ISerializable const& object) const
{
    auto const &other = dynamic_cast<DerivedClass const&>(object);
    return this == &other;
}
// equality operators
bool operator==(const DerivedClass &lhs, const DerivedClass &rhs) {
    return &lhs == &rhs;
}
bool operator!=(const DerivedClass &lhs, const DerivedClass &rhs){
    return !(lhs == rhs);
}
// hash code trait
// type name trait
std::string DerivedClass::type_name() const
{
    return "DerivedClass";
}
// static type name trait
std::string DerivedClass::static_type_name()
{
    return "DerivedClass";
}
// polymorphic to string
std::string DerivedClass::toString() const
{
    std::string res = "DerivedClass\n";
    res += "\tderivedField = ";
    res += rd::to_string(derivedField_);
    res += '\n';
    res += "\tbaseField = ";
    res += rd::to_string(baseField_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const DerivedClass & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

