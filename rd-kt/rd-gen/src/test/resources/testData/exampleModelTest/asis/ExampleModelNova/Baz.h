//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#ifndef BAZ_GENERATED_H
#define BAZ_GENERATED_H


#include "protocol/Protocol.h"
#include "types/DateTime.h"
#include "impl/RdSignal.h"
#include "impl/RdProperty.h"
#include "impl/RdList.h"
#include "impl/RdSet.h"
#include "impl/RdMap.h"
#include "base/ISerializersOwner.h"
#include "base/IUnknownInstance.h"
#include "serialization/ISerializable.h"
#include "serialization/Polymorphic.h"
#include "serialization/NullableSerializer.h"
#include "serialization/ArraySerializer.h"
#include "serialization/InternedSerializer.h"
#include "serialization/SerializationCtx.h"
#include "serialization/Serializers.h"
#include "ext/RdExtBase.h"
#include "task/RdCall.h"
#include "task/RdEndpoint.h"
#include "task/RdSymmetricCall.h"
#include "std/to_string.h"
#include "std/hash.h"
#include "std/allocator.h"
#include "util/enum.h"
#include "util/gen_util.h"

#include <cstring>
#include <cstdint>
#include <vector>
#include <ctime>

#include "thirdparty.hpp"
#include "instantiations_ExampleRootNova.h"

#include "ExampleModelNova/Foo.Generated.h"
#include "ExampleModelNova/A.Generated.h"
#include "ExampleModelNova/ScalarPrimer.Generated.h"
#include "ExampleModelNova/FooBar.Generated.h"
#include "A.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

/// <summary>
/// <p>Generated from: Example.kt:51</p>
/// </summary>
namespace org.example {

class Baz : public A {

private:
    // custom serializers
    using __FooNullableSerializer = rd::NullableSerializer<rd::AbstractPolymorphic<Foo>>;
    using __ANullableSerializer = rd::NullableSerializer<rd::AbstractPolymorphic<A>>;
    using __StringSerializer = rd::rd::Polymorphic<std::wstring>;
    using __StringNullableSerializer = rd::rd::NullableSerializer<rd::Polymorphic<std::wstring>>;

public:
    // constants
    static constexpr std::wstring const_nls{const_nls_value};
    static constexpr std::wstring const_for_default_nls{291};

protected:
    // fields
    std::vector<rd::Wrapper<Foo>> foo_;
    std::vector<rd::Wrapper<A>> bar_;
    rd::Wrapper<std::wstring> nls_field_;
    rd::Wrapper<std::wstring> nls_nullable_field_;
    std::vector<rd::Wrapper<std::wstring>> string_list_field_;
    std::vector<rd::Wrapper<std::wstring>> nls_list_field_;
    rd::RdProperty<rd::Wrapper<Foo>, Baz::__FooNullableSerializer> foo1_;
    rd::RdProperty<rd::Wrapper<A>, Baz::__ANullableSerializer> bar1_;
    rd::RdMap<int32_t, ScalarPrimer, rd::Polymorphic<int32_t>, rd::AbstractPolymorphic<ScalarPrimer>> mapScalar_;
    rd::RdMap<int32_t, FooBar, rd::Polymorphic<int32_t>, rd::Polymorphic<FooBar>> mapBindable_;
    rd::RdProperty<std::wstring, Baz::__StringSerializer> property_with_default_nls_{const_for_default_nls};
    rd::RdProperty<std::wstring, Baz::__StringSerializer> property_with_several_attrs_;
    rd::RdProperty<std::wstring, Baz::__StringSerializer> nls_prop_;
    rd::RdProperty<rd::Wrapper<std::wstring>, Baz::__StringNullableSerializer> nullable_nls_prop_;
    rd::Wrapper<std::wstring> non_nls_open_field_;
    rd::RdProperty<rd::TimeSpan, rd::Polymorphic<rd::TimeSpan>> duration_prop_;
    

private:
    // initializer
    void initialize();

public:
    // primary ctor
    Baz(std::vector<rd::Wrapper<Foo>> foo_, std::vector<rd::Wrapper<A>> bar_, rd::Wrapper<std::wstring> nls_field_, rd::Wrapper<std::wstring> nls_nullable_field_, std::vector<rd::Wrapper<std::wstring>> string_list_field_, std::vector<rd::Wrapper<std::wstring>> nls_list_field_, rd::RdProperty<rd::Wrapper<Foo>, Baz::__FooNullableSerializer> foo1_, rd::RdProperty<rd::Wrapper<A>, Baz::__ANullableSerializer> bar1_, rd::RdMap<int32_t, ScalarPrimer, rd::Polymorphic<int32_t>, rd::AbstractPolymorphic<ScalarPrimer>> mapScalar_, rd::RdMap<int32_t, FooBar, rd::Polymorphic<int32_t>, rd::Polymorphic<FooBar>> mapBindable_, rd::RdProperty<std::wstring, Baz::__StringSerializer> property_with_default_nls_, rd::RdProperty<std::wstring, Baz::__StringSerializer> property_with_several_attrs_, rd::RdProperty<std::wstring, Baz::__StringSerializer> nls_prop_, rd::RdProperty<rd::Wrapper<std::wstring>, Baz::__StringNullableSerializer> nullable_nls_prop_, rd::Wrapper<std::wstring> non_nls_open_field_, rd::RdProperty<rd::TimeSpan, rd::Polymorphic<rd::TimeSpan>> duration_prop_, rd::RdProperty<std::wstring, rd::Polymorphic<std::wstring>> y_, rd::RdProperty<Z, rd::Polymorphic<Z>> z_, int32_t x_, rd::RdMap<int32_t, int32_t, rd::Polymorphic<int32_t>, rd::Polymorphic<int32_t>> sdf_);
    // secondary constructor
    Baz(std::vector<rd::Wrapper<Foo>> foo_, std::vector<rd::Wrapper<A>> bar_, rd::Wrapper<std::wstring> nls_field_, rd::Wrapper<std::wstring> nls_nullable_field_, std::vector<rd::Wrapper<std::wstring>> string_list_field_, std::vector<rd::Wrapper<std::wstring>> nls_list_field_, rd::Wrapper<std::wstring> non_nls_open_field_, int32_t x_);
    
    // default ctors and dtors
    
    Baz() = delete;
    
    Baz(Baz &&) = default;
    
    Baz& operator=(Baz &&) = default;
    
    virtual ~Baz() = default;
    
    // reader
    static Baz read(rd::SerializationCtx& ctx, rd::Buffer & buffer);
    
    // writer
    void write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const override;
    
    // virtual init
    void init(rd::Lifetime lifetime) const override;
    
    // identify
    void identify(const rd::Identities &identities, rd::RdId const &id) const override;
    
    // getters
    std::vector<rd::Wrapper<Foo>> const & get_foo() const;
    std::vector<rd::Wrapper<A>> const & get_bar() const;
    std::wstring const & get_nls_field() const;
    rd::Wrapper<std::wstring> const & get_nls_nullable_field() const;
    std::vector<rd::Wrapper<std::wstring>> const & get_string_list_field() const;
    std::vector<rd::Wrapper<std::wstring>> const & get_nls_list_field() const;
    rd::IProperty<rd::Wrapper<Foo>> const & get_foo1() const;
    rd::IProperty<rd::Wrapper<A>> const & get_bar1() const;
    rd::IViewableMap<int32_t, ScalarPrimer> const & get_mapScalar() const;
    rd::IViewableMap<int32_t, FooBar> const & get_mapBindable() const;
    rd::IProperty<std::wstring> const & get_property_with_default_nls() const;
    rd::IProperty<std::wstring> const & get_property_with_several_attrs() const;
    rd::IProperty<std::wstring> const & get_nls_prop() const;
    rd::IProperty<rd::Wrapper<std::wstring>> const & get_nullable_nls_prop() const;
    std::wstring const & get_non_nls_open_field() const;
    rd::IProperty<rd::TimeSpan> const & get_duration_prop() const;
    
    // intern

private:
    // equals trait
    bool equals(rd::ISerializable const& object) const override;

public:
    // equality operators
    friend bool operator==(const Baz &lhs, const Baz &rhs);
    friend bool operator!=(const Baz &lhs, const Baz &rhs);
    // hash code trait
    // type name trait
    std::string type_name() const override;
    // static type name trait
    static std::string static_type_name();

private:
    // polymorphic to string
    std::string toString() const override;

public:
    // external to string
    friend std::string to_string(const Baz & value);
};

}

#ifdef _MSC_VER
#pragma warning( pop )
#endif



#endif // BAZ_GENERATED_H
