//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "DerivedBaseStruct.Generated.h"


#include "DerivedBaseStruct_Unknown.Generated.h"

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

namespace org.example {
// companion
// constants
// initializer
void DerivedBaseStruct::initialize()
{
}
// primary ctor
DerivedBaseStruct::DerivedBaseStruct(bool derivedField_, int32_t baseField_) :
BaseStruct(std::move(baseField_))
,derivedField_(std::move(derivedField_))
{
    initialize();
}
// secondary constructor
// default ctors and dtors
// reader
rd::Wrapper<DerivedBaseStruct> DerivedBaseStruct::readUnknownInstance(rd::SerializationCtx& ctx, rd::Buffer & buffer, rd::RdId const& unknownId, int32_t size)
{
    int32_t objectStartPosition = buffer.get_position();
    auto derivedField_ = buffer.read_bool();
    auto baseField_ = buffer.read_integral<int32_t>();
    auto unknownBytes = rd::Buffer::ByteArray(objectStartPosition + size - buffer.get_position());
    buffer.read_byte_array_raw(unknownBytes);
    DerivedBaseStruct_Unknown res{std::move(derivedField_), std::move(baseField_), unknownId, unknownBytes};
    return rd::Wrapper<DerivedBaseStruct_Unknown>(std::move(res));
}
// writer
// virtual init
// identify
// getters
bool const & DerivedBaseStruct::get_derivedField() const
{
    return derivedField_;
}
// intern
// equals trait
// equality operators
bool operator==(const DerivedBaseStruct &lhs, const DerivedBaseStruct &rhs) {
    if (lhs.type_name() != rhs.type_name()) return false;
    return lhs.equals(rhs);
}
bool operator!=(const DerivedBaseStruct &lhs, const DerivedBaseStruct &rhs){
    return !(lhs == rhs);
}
// hash code trait
size_t DerivedBaseStruct::hashCode() const noexcept
{
    size_t __r = 0;
    __r = __r * 31 + (rd::hash<bool>()(get_derivedField()));
    __r = __r * 31 + (rd::hash<int32_t>()(get_baseField()));
    return __r;
}
// type name trait
std::string DerivedBaseStruct::type_name() const
{
    return "DerivedBaseStruct";
}
// static type name trait
std::string DerivedBaseStruct::static_type_name()
{
    return "DerivedBaseStruct";
}
// polymorphic to string
std::string DerivedBaseStruct::toString() const
{
    std::string res = "DerivedBaseStruct\n";
    res += "\tderivedField = ";
    res += rd::to_string(derivedField_);
    res += '\n';
    res += "\tbaseField = ";
    res += rd::to_string(baseField_);
    res += '\n';
    return res;
}
// external to string
std::string to_string(const DerivedBaseStruct & value)
{
    return value.toString();
}
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

