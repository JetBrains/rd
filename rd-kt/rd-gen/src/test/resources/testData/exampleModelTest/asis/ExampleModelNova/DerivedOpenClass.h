//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#ifndef DERIVEDOPENCLASS_GENERATED_H
#define DERIVEDOPENCLASS_GENERATED_H


#include "protocol/Protocol.h"
#include "types/DateTime.h"
#include "impl/RdSignal.h"
#include "impl/RdProperty.h"
#include "impl/RdList.h"
#include "impl/RdSet.h"
#include "impl/RdMap.h"
#include "base/ISerializersOwner.h"
#include "base/IUnknownInstance.h"
#include "serialization/ISerializable.h"
#include "serialization/Polymorphic.h"
#include "serialization/NullableSerializer.h"
#include "serialization/ArraySerializer.h"
#include "serialization/InternedSerializer.h"
#include "serialization/SerializationCtx.h"
#include "serialization/Serializers.h"
#include "ext/RdExtBase.h"
#include "task/RdCall.h"
#include "task/RdEndpoint.h"
#include "task/RdSymmetricCall.h"
#include "std/to_string.h"
#include "std/hash.h"
#include "std/allocator.h"
#include "util/enum.h"
#include "util/gen_util.h"

#include <cstring>
#include <cstdint>
#include <vector>
#include <ctime>

#include "thirdparty.hpp"
#include "instantiations_ExampleRootNova.h"

#include "OpenClass.Generated.h"



#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable:4250 )
#pragma warning( disable:4307 )
#pragma warning( disable:4267 )
#pragma warning( disable:4244 )
#pragma warning( disable:4100 )
#endif

/// <summary>
/// <p>Generated from: Example.kt:116</p>
/// </summary>
namespace org.example {

// open
class DerivedOpenClass : public OpenClass {

private:
    // custom serializers

public:
    // constants

protected:
    // fields
    bool derivedField_;
    

private:
    // initializer
    void initialize();

public:
    // primary ctor
    DerivedOpenClass(bool derivedField_, int32_t baseField_);
    
    // default ctors and dtors
    
    DerivedOpenClass() = delete;
    
    DerivedOpenClass(DerivedOpenClass &&) = default;
    
    DerivedOpenClass& operator=(DerivedOpenClass &&) = default;
    
    virtual ~DerivedOpenClass() = default;
    
    // reader
    static rd::Wrapper<DerivedOpenClass> readUnknownInstance(rd::SerializationCtx& ctx, rd::Buffer & buffer, rd::RdId const& unknownId, int32_t size);
    
    // writer
    virtual void write(rd::SerializationCtx& ctx, rd::Buffer& buffer) const override = 0;
    
    // virtual init
    void init(rd::Lifetime lifetime) const override;
    
    // identify
    void identify(const rd::Identities &identities, rd::RdId const &id) const override;
    
    // getters
    bool const & get_derivedField() const;
    
    // intern

private:
    // equals trait

public:
    // equality operators
    friend bool operator==(const DerivedOpenClass &lhs, const DerivedOpenClass &rhs);
    friend bool operator!=(const DerivedOpenClass &lhs, const DerivedOpenClass &rhs);
    // hash code trait
    // type name trait
    std::string type_name() const override;
    // static type name trait
    static std::string static_type_name();

private:
    // polymorphic to string
    std::string toString() const override;

public:
    // external to string
    friend std::string to_string(const DerivedOpenClass & value);
};

}

#ifdef _MSC_VER
#pragma warning( pop )
#endif



#endif // DERIVEDOPENCLASS_GENERATED_H
