//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.11.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Platform.Tests.Cases.RdFramework.PerClientId
{
  
  
  /// <summary>
  /// <p>Generated from: PerClientId.kt:9</p>
  /// </summary>
  public class PerClientIdRoot : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<string> AProp => _AProp.GetForCurrentContext();
    [NotNull] public IPerContextMap<string, RdProperty<string>> APropPerContextMap => _AProp;
    [NotNull] public IViewableProperty<bool> APropDefault => _APropDefault.GetForCurrentContext();
    [NotNull] public IPerContextMap<string, RdProperty<bool>> APropDefaultPerContextMap => _APropDefault;
    [NotNull] public IViewableProperty<bool> APropDefault2 => _APropDefault2;
    [NotNull] public IViewableMap<string, string> AMap => _AMap.GetForCurrentContext();
    [NotNull] public IPerContextMap<string, RdMap<string, string>> AMapPerContextMap => _AMap;
    [NotNull] public IViewableProperty<InnerClass> InnerProp => _InnerProp;
    
    //private fields
    [NotNull] private readonly RdPerContextMap<string, RdProperty<string>> _AProp;
    [NotNull] private readonly RdPerContextMap<string, RdProperty<bool>> _APropDefault;
    [NotNull] private readonly RdProperty<bool> _APropDefault2;
    [NotNull] private readonly RdPerContextMap<string, RdMap<string, string>> _AMap;
    [NotNull] private readonly RdProperty<InnerClass> _InnerProp;
    
    //primary constructor
    private PerClientIdRoot(
      [NotNull] RdPerContextMap<string, RdProperty<string>> aProp,
      [NotNull] RdPerContextMap<string, RdProperty<bool>> aPropDefault,
      [NotNull] RdProperty<bool> aPropDefault2,
      [NotNull] RdPerContextMap<string, RdMap<string, string>> aMap,
      [NotNull] RdProperty<InnerClass> innerProp
    )
    {
      if (aProp == null) throw new ArgumentNullException("aProp");
      if (aPropDefault == null) throw new ArgumentNullException("aPropDefault");
      if (aPropDefault2 == null) throw new ArgumentNullException("aPropDefault2");
      if (aMap == null) throw new ArgumentNullException("aMap");
      if (innerProp == null) throw new ArgumentNullException("innerProp");
      
      _AProp = aProp;
      _APropDefault = aPropDefault;
      _APropDefault2 = aPropDefault2;
      _AMap = aMap;
      _InnerProp = innerProp;
      _APropDefault2.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("aProp", _AProp));
      BindableChildren.Add(new KeyValuePair<string, object>("aPropDefault", _APropDefault));
      BindableChildren.Add(new KeyValuePair<string, object>("aPropDefault2", _APropDefault2));
      BindableChildren.Add(new KeyValuePair<string, object>("aMap", _AMap));
      BindableChildren.Add(new KeyValuePair<string, object>("innerProp", _InnerProp));
    }
    //secondary constructor
    private PerClientIdRoot (
    ) : this (
      new RdPerContextMap<string, RdProperty<string>>(PerClientIdRoot.Key.Instance, isMaster => { var value = new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString);  return value; }),
      new RdPerContextMap<string, RdProperty<bool>>(PerClientIdRoot.Key.Instance, isMaster => { var value = new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool, false);  return value; }),
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool, true),
      new RdPerContextMap<string, RdMap<string, string>>(PerClientIdRoot.Key.Instance, isMaster => { var value = new RdMap<string, string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString); value.IsMaster = isMaster; return value; }),
      new RdProperty<InnerClass>(InnerClass.Read, InnerClass.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 3214444051594582608L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(PerClientIdStruct.Read, PerClientIdStruct.Write);
      serializers.Register(PerClientIdSignal.Read, PerClientIdSignal.Write);
      
      serializers.RegisterToplevelOnce(typeof(PerClientIdRoot), PerClientIdRoot.RegisterDeclaredTypesSerializers);
    }
    
    public PerClientIdRoot(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("PerClientIdRoot"));
      this.BindTopLevel(lifetime, protocol, "PerClientIdRoot");
    }
    
    //constants
    public class Key : ThreadLocalRdContext<string> {
      private Key() : base("Key", true, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString) {}
      public static readonly Key Instance = new Key();
      protected override void RegisterOn(ISerializers serializers)
      {
      serializers.Register((_, __) => Instance, (_, __, ___) => { });
      }
    }
    public class LightKey : ThreadLocalRdContext<int> {
      private LightKey() : base("LightKey", false, JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt) {}
      public static readonly LightKey Instance = new LightKey();
      protected override void RegisterOn(ISerializers serializers)
      {
      serializers.Register((_, __) => Instance, (_, __, ___) => { });
      }
    }
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("PerClientIdRoot (");
      using (printer.IndentCookie()) {
        printer.Print("aProp = "); _AProp.PrintEx(printer); printer.Println();
        printer.Print("aPropDefault = "); _APropDefault.PrintEx(printer); printer.Println();
        printer.Print("aPropDefault2 = "); _APropDefault2.PrintEx(printer); printer.Println();
        printer.Print("aMap = "); _AMap.PrintEx(printer); printer.Println();
        printer.Print("innerProp = "); _InnerProp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: PerClientId.kt:21</p>
  /// </summary>
  public sealed class InnerClass : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<string> SomeValue => _SomeValue.GetForCurrentContext();
    [NotNull] public IPerContextMap<string, RdProperty<string>> SomeValuePerContextMap => _SomeValue;
    [NotNull] public IViewableProperty<PerClientIdStruct> SomeClassValue => _SomeClassValue.GetForCurrentContext();
    [NotNull] public IPerContextMap<string, RdProperty<PerClientIdStruct>> SomeClassValuePerContextMap => _SomeClassValue;
    [NotNull] public ISignal<PerClientIdSignal> SomeClassSignal => _SomeClassSignal.GetForCurrentContext();
    [NotNull] public IPerContextMap<string, RdSignal<PerClientIdSignal>> SomeClassSignalPerContextMap => _SomeClassSignal;
    
    //private fields
    [NotNull] private readonly RdPerContextMap<string, RdProperty<string>> _SomeValue;
    [NotNull] private readonly RdPerContextMap<string, RdProperty<PerClientIdStruct>> _SomeClassValue;
    [NotNull] private readonly RdPerContextMap<string, RdSignal<PerClientIdSignal>> _SomeClassSignal;
    
    //primary constructor
    private InnerClass(
      [NotNull] RdPerContextMap<string, RdProperty<string>> someValue,
      [NotNull] RdPerContextMap<string, RdProperty<PerClientIdStruct>> someClassValue,
      [NotNull] RdPerContextMap<string, RdSignal<PerClientIdSignal>> someClassSignal
    )
    {
      if (someValue == null) throw new ArgumentNullException("someValue");
      if (someClassValue == null) throw new ArgumentNullException("someClassValue");
      if (someClassSignal == null) throw new ArgumentNullException("someClassSignal");
      
      _SomeValue = someValue;
      _SomeClassValue = someClassValue;
      _SomeClassSignal = someClassSignal;
      _SomeValue.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("someValue", _SomeValue));
      BindableChildren.Add(new KeyValuePair<string, object>("someClassValue", _SomeClassValue));
      BindableChildren.Add(new KeyValuePair<string, object>("someClassSignal", _SomeClassSignal));
    }
    //secondary constructor
    public InnerClass (
    ) : this (
      new RdPerContextMap<string, RdProperty<string>>(PerClientIdRoot.Key.Instance, isMaster => { var value = new RdProperty<string>(ReadStringNullable, WriteStringNullable);  return value; }),
      new RdPerContextMap<string, RdProperty<PerClientIdStruct>>(PerClientIdRoot.Key.Instance, isMaster => { var value = new RdProperty<PerClientIdStruct>(PerClientIdStruct.Read, PerClientIdStruct.Write);  return value; }),
      new RdPerContextMap<string, RdSignal<PerClientIdSignal>>(PerClientIdRoot.Key.Instance, isMaster => { var value = new RdSignal<PerClientIdSignal>(PerClientIdSignal.Read, PerClientIdSignal.Write);  return value; })
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<InnerClass> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var someValue = RdPerContextMap<string, RdProperty<string>>.Read(ctx, reader, PerClientIdRoot.Key.Instance, isMaster => { var value = new RdProperty<string>(ReadStringNullable, WriteStringNullable);  return value; });
      var someClassValue = RdPerContextMap<string, RdProperty<PerClientIdStruct>>.Read(ctx, reader, PerClientIdRoot.Key.Instance, isMaster => { var value = new RdProperty<PerClientIdStruct>(PerClientIdStruct.Read, PerClientIdStruct.Write);  return value; });
      var someClassSignal = RdPerContextMap<string, RdSignal<PerClientIdSignal>>.Read(ctx, reader, PerClientIdRoot.Key.Instance, isMaster => { var value = new RdSignal<PerClientIdSignal>(PerClientIdSignal.Read, PerClientIdSignal.Write);  return value; });
      var _result = new InnerClass(someValue, someClassValue, someClassSignal).WithId(_id);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<InnerClass> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdPerContextMap<string, RdProperty<string>>.Write(ctx, writer, value._SomeValue);
      RdPerContextMap<string, RdProperty<PerClientIdStruct>>.Write(ctx, writer, value._SomeClassValue);
      RdPerContextMap<string, RdSignal<PerClientIdSignal>>.Write(ctx, writer, value._SomeClassSignal);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("InnerClass (");
      using (printer.IndentCookie()) {
        printer.Print("someValue = "); _SomeValue.PrintEx(printer); printer.Println();
        printer.Print("someClassValue = "); _SomeClassValue.PrintEx(printer); printer.Println();
        printer.Print("someClassSignal = "); _SomeClassSignal.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: PerClientId.kt:24</p>
  /// </summary>
  public sealed class PerClientIdSignal : IPrintable, IEquatable<PerClientIdSignal>
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<PerClientIdSignal> Read = (ctx, reader) => 
    {
      var _result = new PerClientIdSignal();
      return _result;
    };
    
    public static CtxWriteDelegate<PerClientIdSignal> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((PerClientIdSignal) obj);
    }
    public bool Equals(PerClientIdSignal other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("PerClientIdSignal (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: PerClientId.kt:23</p>
  /// </summary>
  public sealed class PerClientIdStruct : IPrintable, IEquatable<PerClientIdStruct>
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<PerClientIdStruct> Read = (ctx, reader) => 
    {
      var _result = new PerClientIdStruct();
      return _result;
    };
    
    public static CtxWriteDelegate<PerClientIdStruct> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((PerClientIdStruct) obj);
    }
    public bool Equals(PerClientIdStruct other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("PerClientIdStruct (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
