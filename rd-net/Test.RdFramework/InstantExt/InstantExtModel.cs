//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace demo
{
  
  
  /// <summary>
  /// <p>Generated from: DemoModel.kt:216</p>
  /// </summary>
  public class InstantExtModel : InstantExtBase
  {
    //fields
    //public fields
    [NotNull] public ISignal<int> Checker => _Checker;
    
    //private fields
    [NotNull] private readonly RdSignal<int> _Checker;
    
    //primary constructor
    private InstantExtModel(
      [NotNull] RdSignal<int> checker
    )
    {
      if (checker == null) throw new ArgumentNullException("checker");
      
      _Checker = checker;
      BindableChildren.Add(new KeyValuePair<string, object>("checker", _Checker));
    }
    //secondary constructor
    internal InstantExtModel (
    ) : this (
      new RdSignal<int>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    public static Type PointcutType => typeof(ExtensibleModel);
    
    protected override long SerializationHash => 5073319630268375416L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(InstantExtRoot), InstantExtRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("InstantExtModel (");
      using (printer.IndentCookie()) {
        printer.Print("checker = "); _Checker.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  public static class ExtensibleModelInstantExtModelEx
  {
    public static InstantExtModel GetInstantExtModel(this ExtensibleModel extensibleModel)
    {
      return extensibleModel.GetOrCreateExtension("instantExtModel", () => new InstantExtModel());
    }
  }
}
